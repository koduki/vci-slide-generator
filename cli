#! /usr/bin/env ruby

require './lib/vci_slide.rb'

cmd = ARGV[0]
subcmd = ARGV[1]

def show_help
    puts <<'EOS'
    
DESCRIPTION
     - VCI generator utilities for debug

SYNOPSIS
    cli COMMAND SUBCOMMAND

COMMANDS
    + export
        - json: export meta data from VCI. e.g) ./cli export json test001.vci
        - image: export slide image from VCI. e.g) ./cli export image test001.vci "Slide-all" test001.png
    + generate
        - pdf: generate generate sample PDF for test e.g) ./cli generate pdf testslide 25
EOS

end

case 
when cmd == "export" then
    template_vci_path = ARGV[2]
    vci_slide = VCISlide.new template_vci_path, nil, nil, nil, nil
    property, glb_buff_data = vci_slide.load_template(template_vci_path)

    case subcmd
    when "json" then
        require 'json'
        puts property.to_json
    when "image" then
        texture_name = ARGV[3] # "Slide-all"
        img_output_path = ARGV[4]

        img_idx = vci_slide.find_image_index property, texture_name
        img_len = property["bufferViews"][img_idx]["byteLength"]

        
        bfv = property["bufferViews"][img_idx]
        img_data = glb_buff_data[bfv["byteOffset"], bfv["byteLength"]];1
        open(img_output_path, 'wb') do |f|
            f.write(img_data.unpack('C*').pack('C*'))
        end
    else
        show_help
    end
when cmd == "generate" then
    case subcmd
    when "pdf" then
        require "open3"
        cmd = "#{__dir__}/script/testslide-gen/testslide-gen.sh #{ARGV[2]} #{ARGV[3]}"
        stdout, stderr, status = Open3.capture3(cmd)
        puts stdout
    else
        show_help
    end
else
    show_help
end

